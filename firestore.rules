rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn (userId) {
      return userId != null
    }
    
    function isModerator(userId) {
      return get(/databases/$(database)/documents/roles/$(userId)).data.moderator == true;
    }

    function isAdmin(userId) {
      return get(/databases/$(database)/documents/roles/$(userId)).data.admin == true;
    }
    
    function isAuthorOrAdmin(userId, question) {
      let isAuthor = question.author.uid == userId;
      return isAuthor || isAdmin(userId);
    }

    function isAuthorOrModerator(userId, question) {
      let isAuthor = question.author.uid == userId;
      return isAuthor || isModerator(userId);
    }

    match /users/{userId} {
      // Everyone can see Users
      allow read;
      // Only Owner can update their User data
      allow write: if isSignedIn(request.auth.uid) && request.auth.uid == userId;
    }

    match /users/{userId}/votes/{questionId} {
      // Only owner can read/write their votes
      allow read: if isSignedIn(request.auth.uid) && request.auth.uid == userId;
      allow write: if isSignedIn(request.auth.uid) && request.auth.uid == userId;
    }

    match /roles/{userId} {
      // User can read their own roles
      allow read: if isSignedIn(request.auth.uid) && request.auth.uid == userId;
      // Only Cloud Function can Write
      allow write: if false; // No writing; only Cloud Function can
    }

    match /rooms/{roomId} {
      allow read: if isSignedIn(request.auth.uid);
      allow write: if isModerator(request.auth.uid) || isAdmin(request.auth.uid);

      match /questions/{questionId} {
        allow read: if isSignedIn(request.auth.uid);
        allow create: if isSignedIn(request.auth.uid);
        allow update: if isAuthorOrModerator(request.auth.uid, resource);
        allow delete: if isAdmin(request.auth.uid);
      }
    }

    // match /{document=**} {
    //   allow read, write: if
    //       request.time < timestamp.date(2020, 10, 23);
    // }
  }
}